services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: >
      postgres
      -c log_statement=all
      -c log_duration=on
      -c log_min_duration_statement=0
      -c logging_collector=off
      -c client_min_messages=log
      -c log_error_verbosity=default
    restart: unless-stopped

  redis:
    image: redis:7
    volumes:
      - redis_data:/data
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  backend:
    build:
      context: .
    env_file:
      - .env
    depends_on:
      alembic:
        condition: service_started
      postgres:
        condition: service_started
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      fill_db:
        condition: service_started
    command: bash -c "uvicorn back.main:app --host 0.0.0.0 --port 8000 --workers ${BACKEND_WORKERS_COUNT}"
    restart: unless-stopped

  fill_db:
    build:
      context: .
    env_file:
      - .env
    depends_on:
      alembic:
        condition: service_started
      postgres:
        condition: service_started
      redis:
        condition: service_started
    command: python -m static.db_base_data

  neural:
    build:
      context: .
    env_file:
      - .env
    depends_on:
      alembic:
        condition: service_started
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    command: python -m neural
    restart: unless-stopped

  alembic:
    build:
      context: .
    command: alembic -c alembic.ini upgrade head
    env_file:
      - .env
    depends_on:
      - postgres

  frontend:
    build:
      context: ./front
    env_file:
      - .env
    depends_on:
      backend:
        condition: service_started
    restart: unless-stopped

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./logs/nginx:/var/log/nginx/
    depends_on:
      frontend:
        condition: service_started
    ports:
      - ${NGINX_PORT}:80
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
